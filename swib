#!/bin/sh

# Renders a text based list of options that can be selected by the
# user using up, down and enter keys and returns the chosen option.
#   Arguments   : list of options, maximum of 256
#                 "opt1" "opt2" ...
#   Return value: selected index (0 for opt1, 1 for opt2 ...)
#   Author: Alexander Klimetschek, https://github.com/alexkli, https://unix.stackexchange.com/a/415155
function select_option {
    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[2m$ESC[1m $1 $ESC[22m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    cursor_blink_on

    return $selected
}

# ------------- switch git branch script -------------
# Author: Ethan Franks, https://github.com/ethanfranks

# color constants for echo output
CYAN='\033[0;36m'
DCYAN='\033[38;5;24m'
MAGENTA='\033[0;35m'
GOLD='\033[38;5;136m'
G1='\033[38;5;255m'
G2='\033[38;5;252m'
G3='\033[38;5;249m'
G4='\033[38;5;246m'
G5='\033[38;5;243m'
G6='\033[38;5;240m'
NC='\033[0m'

echo "${G1} ____ _  _ _${G2}_ ____ _${G2}__ _  _"
echo "${G1}/ ___/ )( ( ${G2} (_  _/ ${G3}__/ )( \\"
echo "${G2}\___ \ /\ /)${G3}(  )(( (${G3}__) __ ("
echo "${G2}(____(_/\_(_${G3}_)(__)\_${G4}__\_)(_/"
echo "${G3} ____ ____  ${G4}__  __ _${G4}  ___ _  _"
echo "${G3}(  _ (  _ \/${G4} _\(  ( ${G5}\/ __/ )( \\"
echo "${G4} ) _ ()   / ${G5}   /    ${G5}( (__) __ ("
echo "${G4}(____(__\_\_${G5}/\_\_)__${G6})\___\_)(_/\n${NC}"

show_current_branch() {
    branchesStr=`git branch`
    # replace * with 1 to use as key for finding current branch
    formatted="${branchesStr//\*/1}"
    localBranches=($formatted)
    for i in "${!localBranches[@]}"
        do
            var="${localBranches[$i]}"
            if [ $var == 1 ]
                then
                    currentBranch=${localBranches[`expr $i + 1`]}
                fi
        done

    echo "${MAGENTA}Curent branch: $currentBranch${NC}"
}
show_current_branch

repos=(local)
get_remotes() {
# loop through remotes and add any with fetch permission to array
strArr=(`git remote -v`)
for i in "${!strArr[@]}"
	do
		var=${strArr[`expr $i + 2`]}
		if [ "$var" == "(fetch)" ]
		then
			repos+=(${strArr[$i]})
		fi
	done
}
get_remotes

# initialize global branches array
branches=()
select_repo() {
    # empty the branches array upon each call
    # necessary for "back" functionality
    branches=()

    # prompt user for repo choice
    echo "${CYAN}Select repo:${NC}"
    select_option "${repos[@]}"
    choice=$?

    if [ "$choice" -eq 0 ]
        # if user selects "local" repo add local branches to branches array
    	then
            branchStr="`git branch`"
            parsedBranchStr="${branchStr//\*/ }"
    		branches+=($parsedBranchStr "${GOLD}*** new branch ***${NC}")
    	# if user selects a remote repo add remote branches to branches array
        else
            branchStr="`git branch --remote --list ${repos[$choice]}/*`"
            branchStrArr=($branchStr)
            parsedBranchStr="${branchStrArr[@]:3}"
    	  	branches+=($parsedBranchStr)
    	fi

    branches+=("${DCYAN}<----- back ------${NC}")
    select_branch
}

select_branch() {
    # prompt user for branch choice
    echo "${CYAN}Select branch:${NC}"
    select_option "${branches[@]}"
    branchChoice=$?

    if [ "${branches[$branchChoice]}" == "${DCYAN}<----- back ------${NC}" ]
        then
            select_repo
        elif [ "$choice" -eq 0 ] && [ "${branches[$branchChoice]}" == "${GOLD}*** new branch ***${NC}" ]
            then
                read -p "Insert new branch name (cannot contain spaces): " branchName
                echo
                git checkout -b "$branchName"
        elif [ "$choice" -eq 0 ] # handles local repo
            then
                echo
                git checkout ${branches[$branchChoice]}
        else # handles remote repos
            repoBranchStr="${branches[$branchChoice]}"
            formatted="${repoBranchStr//// }"
            repoBranchArr=($formatted)
            desiredBranch="${repoBranchArr[@]:1}"

            echo
            git fetch ${repos[$choice]}
            git switch $desiredBranch
        fi
}

select_repo
